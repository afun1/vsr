const { Vimeo } = require('@vimeo/vimeo');
const { IncomingForm } = require('formidable');
const fs = require('fs');

exports.config = {
  api: {
    bodyParser: false,
  },
};

module.exports = async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    // Debug: Check if Vimeo credentials are available
    console.log('[DEBUG] Environment variables check:');
    console.log('VIMEO_ACCESS_TOKEN exists:', !!process.env.VIMEO_ACCESS_TOKEN);
    console.log('VIMEO_CLIENT_ID exists:', !!process.env.VIMEO_CLIENT_ID);
    console.log('VIMEO_CLIENT_SECRET exists:', !!process.env.VIMEO_CLIENT_SECRET);
    
    if (!process.env.VIMEO_ACCESS_TOKEN) {
      console.error('VIMEO_ACCESS_TOKEN not found in environment variables');
      return res.status(500).json({ error: 'Vimeo configuration missing - VIMEO_ACCESS_TOKEN' });
    }
    // Parse form data
    const form = new IncomingForm({
      maxFileSize: 500 * 1024 * 1024, // 500MB limit
    });

    const [fields, files] = await form.parse(req);
    
    const videoFile = Array.isArray(files.video) ? files.video[0] : files.video;
    if (!videoFile) {
      return res.status(400).json({ error: 'No video file provided' });
    }

    // Extract metadata
    const userName = Array.isArray(fields.userName) ? fields.userName[0] : fields.userName || 'Unknown User';
    const customerName = Array.isArray(fields.customerName) ? fields.customerName[0] : fields.customerName || 'Unknown Customer';
    const contactId = Array.isArray(fields.contactId) ? fields.contactId[0] : fields.contactId || '';
    const comments = Array.isArray(fields.comments) ? fields.comments[0] : fields.comments || '';
    const userEmail = Array.isArray(fields.userEmail) ? fields.userEmail[0] : fields.userEmail || 'unknown';

    // Generate video title and description
    const timestamp = new Date().toISOString().split('T')[0];
    const videoTitle = `${customerName} - Screen Recording (${timestamp})`;
    const videoDescription = `Customer: ${customerName}
Sparky User: ${userName} (${userEmail})
Contact ID: ${contactId}
Creation Date: ${timestamp}
Comments: ${comments}

Generated by Sparky Recording System`;

    console.log('[Vercel] Uploading to Vimeo:', videoTitle);

    // Initialize Vimeo client with environment variables
    const vimeo = new Vimeo(
      process.env.VIMEO_CLIENT_ID,
      process.env.VIMEO_CLIENT_SECRET, 
      process.env.VIMEO_ACCESS_TOKEN
    );

    // Upload to Vimeo
    const uploadResult = await new Promise((resolve, reject) => {
      vimeo.upload(
        videoFile.filepath,
        {
          name: videoTitle,
          description: videoDescription,
          privacy: {
            view: 'unlisted'
          }
        },
        (uri) => {
          console.log('[Vercel] Vimeo upload completed:', uri);
          resolve(uri);
        },
        (bytesUploaded, bytesTotal) => {
          const percent = ((bytesUploaded / bytesTotal) * 100).toFixed(2);
          console.log(`[Vercel] Progress: ${percent}%`);
        },
        (error) => {
          console.error('[Vercel] Vimeo upload error details:', {
            error: error,
            message: error?.message,
            response: error?.response?.data,
            status: error?.response?.status
          });
          reject(error);
        }
      );
    });

    // Clean up temp file
    if (fs.existsSync(videoFile.filepath)) {
      fs.unlinkSync(videoFile.filepath);
    }

    // Return success response
    const vimeoVideoId = uploadResult.split('/').pop();
    const vimeoUrl = `https://vimeo.com/${vimeoVideoId}`;
    
    console.log('[Vercel] Success! Video URL:', vimeoUrl);
    
    res.status(200).json({
      success: true,
      url: vimeoUrl, // Changed from videoUrl to url to match frontend expectation
      vimeoUri: uploadResult,
      title: videoTitle,
      description: videoDescription
    });

  } catch (error) {
    console.error('[Vercel] Error:', error);
    res.status(500).json({ 
      error: 'Failed to upload video to Vimeo', 
      details: error.message 
    });
  }
}
